"""Telegram command handlers for the bot."""
from __future__ import annotations

import asyncio
import logging

from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from bot.filters import IsAdmin
from config import settings
from services.parser import Parser

logger = logging.getLogger(__name__)
router = Router()
parser = Parser()


async def _fetch_items(url: str):
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, parser.get_items_from_url, url)


def _extract_user_id(message: Message) -> int | None:
    user = message.from_user
    return user.id if user else None


@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """
    Handler for /start command
    
    Args:
        message: Incoming message
    """
    user_id = _extract_user_id(message)
    logger.info("User %s started the bot", user_id)

    is_admin = user_id in settings.ADMIN_CHAT_IDS if user_id else False

    if is_admin:
        await message.answer(
            "‚úÖ <b>–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –±–æ—Ç –Ω–∞—á–Ω—ë—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ª–æ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö.\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/status - –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "/test <url> - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ URL\n"
            "/help - –ü–æ–º–æ—â—å",
            parse_mode='HTML'
        )
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
            parse_mode='HTML'
        )


@router.message(Command("status"), IsAdmin())
async def cmd_status(message: Message) -> None:
    """
    Handler for /status command (admin only)
    
    Args:
        message: Incoming message
    """
    user_id = _extract_user_id(message)
    logger.info("Admin %s requested status", user_id)

    status_text = (
        "üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
        f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {settings.CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç\n"
        f"üîó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ URL: {len(settings.MONITOR_URLS)}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤: {len(settings.ADMIN_CHAT_IDS)}\n\n"
        "<b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ URL:</b>\n"
    )
    
    for i, url in enumerate(settings.MONITOR_URLS, 1):
        status_text += f"{i}. {url}\n"
    
    await message.answer(status_text, parse_mode='HTML')


@router.message(Command("help"), IsAdmin())
async def cmd_help(message: Message) -> None:
    """
    Handler for /help command (admin only)
    
    Args:
        message: Incoming message
    """
    user_id = _extract_user_id(message)
    logger.info("Admin %s requested help", user_id)

    help_text = (
        "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ URL –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "
        "–æ –Ω–æ–≤—ã–º –ª–æ—Ç–∞–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/status - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/test <url> - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ URL\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üí° –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ª–æ—Ç—ã "
        f"–∫–∞–∂–¥—ã–µ {settings.CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç."
    )
    
    await message.answer(help_text, parse_mode='HTML')


@router.message(Command("test"), IsAdmin())
async def cmd_test(message: Message) -> None:
    """
    Handler for /test command (admin only)
    Test parsing a specific URL
    
    Args:
        message: Incoming message
    """
    user_id = _extract_user_id(message)
    logger.info("Admin %s requested test", user_id)

    bot = message.bot

    if not user_id or bot is None:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            parse_mode='HTML'
        )
        return

    command_parts = (message.text or "").split(maxsplit=1)

    if len(command_parts) < 2:
        await bot.send_message(
            chat_id=user_id,
            text=(
                "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/test URL</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "<code>/test https://coins.ay.by/sssr/yubilejnye/iz-dragocennyh-metallov/</code>"
            ),
            parse_mode='HTML'
        )
        return

    url = command_parts[1].strip()

    if not url.startswith('http'):
        await bot.send_message(
            chat_id=user_id,
            text=(
                "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
                "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://"
            ),
            parse_mode='HTML'
        )
        return

    status_msg = await bot.send_message(
        chat_id=user_id,
        text=(
            "‚è≥ <b>–ü—Ä–æ–≤–µ—Ä—è—é URL...</b>\n"
            f"URL: <code>{url}</code>"
        ),
        parse_mode='HTML'
    )

    try:
        items = await _fetch_items(url)

        if not items:
            await status_msg.edit_text(
                "‚ö†Ô∏è <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞</b>\n\n"
                f"URL: <code>{url}</code>\n\n"
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞.",
                parse_mode='HTML'
            )
            return
        
        summary_text = (
            "‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞</b>\n\n"
            f"URL: <code>{url}</code>\n"
            f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{len(items)}</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö..."
        )
        await status_msg.edit_text(summary_text, parse_mode='HTML')

        for i, item in enumerate(items, 1):
            try:
                caption = (
                    f"üîπ <b>–¢–æ–≤–∞—Ä {i}/{len(items)}</b>\n\n"
                    f"<b>{item.title}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: {item.price}\n"
                    f"üîó {item.url}"
                )
                
                await bot.send_photo(
                    chat_id=user_id,
                    photo=item.img_url,
                    caption=caption,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.exception("Error sending item %s", i)
                await bot.send_message(
                    chat_id=user_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ {i}: {item.title}",
                    parse_mode='HTML'
                )

        await bot.send_message(
            chat_id=user_id,
            text=(
                f"‚úÖ <b>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n"
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(items)} —Ç–æ–≤–∞—Ä(–æ–≤)"
            ),
            parse_mode='HTML'
        )
    except Exception as e:
        logger.exception("Error in test command")
        await status_msg.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å URL:\n"
            f"<code>{url}</code>\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            parse_mode='HTML'
        )

    if message.chat.id != user_id:
        await message.reply(
            "üì¨ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            quote=True
        )


